{
  "GUID": "7dd9c5",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": 7.52230358,
    "posY": 3.15916562,
    "posZ": 140.512177,
    "rotX": -0.0005911985,
    "rotY": 179.984512,
    "rotZ": 0.00107014715,
    "scaleX": 0.7,
    "scaleY": 0.7,
    "scaleZ": 0.7
  },
  "Nickname": "Les Outils de Maleson",
  "Description": "",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0.0,
    "y": 0.0,
    "z": 0.0
  },
  "ColorDiffuse": {
    "r": 1.0,
    "g": 1.0,
    "b": 1.0
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": false,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": true,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "MaterialIndex": -1,
  "MeshIndex": -1,
  "Number": 0,
  "CustomMesh": {
    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
    "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1983303746898381781/98EBA6CC4DEEA38A4570B6B7AD5E2CA04B64BCA9/",
    "NormalURL": "",
    "ColliderURL": "",
    "Convex": true,
    "MaterialIndex": 3,
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "SpecularIntensity": 0.0,
      "SpecularSharpness": 2.0,
      "FresnelStrength": 0.0
    },
    "CastShadows": true
  },
  "Bag": {
    "Order": 0
  },
  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
  "LuaScriptState": "{\"ml\":{\"01025c\":{\"lock\":false,\"pos\":{\"x\":30,\"y\":1.29482567310333,\"z\":-31},\"rot\":{\"x\":2.88448291030363E-07,\"y\":0.00842241011559963,\"z\":4.60258576140404E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0.701960802078247,\"r\":0.0652308166027069}},\"06c23b\":{\"lock\":false,\"pos\":{\"x\":4.97585821151733,\"y\":6.09269762039185,\"z\":72.8944396972656},\"rot\":{\"x\":10.3710517883301,\"y\":180.024841308594,\"z\":0.00418976088985801},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"0c4e01\":{\"lock\":false,\"pos\":{\"x\":8.475905418396,\"y\":1.06550347805023,\"z\":45.3494682312012},\"rot\":{\"x\":10.3710508346558,\"y\":179.987701416016,\"z\":-0.00249339151196182},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0eb2ca\":{\"lock\":false,\"pos\":{\"x\":5.9758825302124,\"y\":1.06548750400543,\"z\":45.3494644165039},\"rot\":{\"x\":10.3710508346558,\"y\":179.994934082031,\"z\":-0.00119063642341644},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"11b382\":{\"lock\":false,\"pos\":{\"x\":13.475884437561,\"y\":1.06553220748901,\"z\":45.3494644165039},\"rot\":{\"x\":10.3710508346558,\"y\":179.990219116211,\"z\":-0.00204105768352747},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1b820c\":{\"lock\":false,\"pos\":{\"x\":-16.9999713897705,\"y\":1.45639824867249,\"z\":39.4991798400879},\"rot\":{\"x\":350.888610839844,\"y\":179.999908447266,\"z\":-7.94451043475419E-05},\"tint\":{\"a\":1,\"b\":0,\"g\":0,\"r\":0.465156614780426}},\"2146ec\":{\"lock\":false,\"pos\":{\"x\":-8.02410984039307,\"y\":1.41206347942352,\"z\":47.3192405700684},\"rot\":{\"x\":10.3710536956787,\"y\":180.014450073242,\"z\":0.00231782835908234},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"23d336\":{\"lock\":false,\"pos\":{\"x\":11.4758739471436,\"y\":6.09273433685303,\"z\":72.8944396972656},\"rot\":{\"x\":10.3710536956787,\"y\":180.000778198242,\"z\":-0.000141987547976896},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"29864e\":{\"lock\":false,\"pos\":{\"x\":8.47590446472168,\"y\":1.69557964801788,\"z\":48.792293548584},\"rot\":{\"x\":10.3710508346558,\"y\":179.997833251953,\"z\":-0.000670831592287868},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2a3110\":{\"lock\":false,\"pos\":{\"x\":-1.52469670772552,\"y\":3.03305244445801,\"z\":56.1763343811035},\"rot\":{\"x\":10.3710536956787,\"y\":179.993881225586,\"z\":-0.00138438341673464},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"2b6dc6\":{\"lock\":false,\"pos\":{\"x\":-50.4999961853027,\"y\":0.79496830701828,\"z\":-0.999911367893219},\"rot\":{\"x\":3.29502972817863E-06,\"y\":-0.000177011272171512,\"z\":-1.72089244188101E-06},\"tint\":{\"a\":1,\"b\":0,\"g\":0.947955071926117,\"r\":1}},\"2b9460\":{\"lock\":true,\"pos\":{\"x\":-13.9999,\"y\":0.9835,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0342,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2bd965\":{\"lock\":false,\"pos\":{\"x\":4.9758677482605,\"y\":3.03233504295349,\"z\":56.1721954345703},\"rot\":{\"x\":10.3710536956787,\"y\":179.99543762207,\"z\":-0.00110340013634413},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"2c41d3\":{\"lock\":true,\"pos\":{\"x\":13,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0341,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"313d63\":{\"lock\":true,\"pos\":{\"x\":17.5,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.034,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3d4c8e\":{\"lock\":false,\"pos\":{\"x\":-8.02414512634277,\"y\":6.09261751174927,\"z\":72.8944396972656},\"rot\":{\"x\":10.3710536956787,\"y\":180.000335693359,\"z\":-0.000220988687942736},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"3fd99c\":{\"lock\":false,\"pos\":{\"x\":4.97601222991943,\"y\":4.56252670288086,\"z\":64.5333862304688},\"rot\":{\"x\":10.3710556030273,\"y\":179.998168945313,\"z\":-0.00061624008230865},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"416f25\":{\"lock\":false,\"pos\":{\"x\":-84,\"y\":0.991,\"z\":-26},\"rot\":{\"x\":-0.0015,\"y\":89.9997,\"z\":179.9952},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"44a109\":{\"lock\":false,\"pos\":{\"x\":47.9999961853027,\"y\":0.794962882995605,\"z\":53},\"rot\":{\"x\":-4.09024141845293E-06,\"y\":0.00187299912795424,\"z\":-1.23114141388214E-05},\"tint\":{\"a\":1,\"b\":0,\"g\":0.366520881652832,\"r\":0.70588231086731}},\"46b6e5\":{\"lock\":true,\"pos\":{\"x\":5.77244758605957,\"y\":3.86597442626953,\"z\":60.727294921875},\"rot\":{\"x\":349.628967285156,\"y\":0.00185543985571712,\"z\":180},\"tint\":{\"a\":1,\"b\":0.0899997875094414,\"g\":0.230999708175659,\"r\":0.442999720573425}},\"48cbc9\":{\"lock\":true,\"pos\":{\"x\":4,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0341,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4df72d\":{\"lock\":false,\"pos\":{\"x\":34.9996070861816,\"y\":0.794962823390961,\"z\":48.5000114440918},\"rot\":{\"x\":4.37059361502179E-06,\"y\":0.00204013870097697,\"z\":-3.75115632778034E-07},\"tint\":{\"a\":1,\"b\":0,\"g\":0.390326678752899,\"r\":1}},\"5376f6\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.31496644020081,\"z\":38},\"rot\":{\"x\":-8.57108716445509E-07,\"y\":4.46897161054949E-07,\"z\":-2.15444447349E-06},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0,\"r\":0.112208001315594}},\"53e9e5\":{\"lock\":false,\"pos\":{\"x\":-8.02410697937012,\"y\":3.03225708007813,\"z\":56.1722030639648},\"rot\":{\"x\":10.3710536956787,\"y\":180.013366699219,\"z\":0.00212531536817551},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"542fd0\":{\"lock\":false,\"pos\":{\"x\":15.9758853912354,\"y\":1.69562411308289,\"z\":48.7922859191895},\"rot\":{\"x\":10.3710498809814,\"y\":179.984222412109,\"z\":-0.00312195857986808},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"5ed250\":{\"lock\":false,\"pos\":{\"x\":-65,\"y\":0.991523504257202,\"z\":-25.9999980926514},\"rot\":{\"x\":-0.00147461867891252,\"y\":89.9994659423828,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6147ae\":{\"lock\":false,\"pos\":{\"x\":11.4758834838867,\"y\":3.03237342834473,\"z\":56.1721954345703},\"rot\":{\"x\":10.3710536956787,\"y\":180.001541137695,\"z\":-5.66671724300249E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"68dbc4\":{\"lock\":false,\"pos\":{\"x\":18.4758472442627,\"y\":1.06556272506714,\"z\":45.3494644165039},\"rot\":{\"x\":10.3710508346558,\"y\":179.987091064453,\"z\":-0.00260399538092315},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"69af08\":{\"lock\":false,\"pos\":{\"x\":-0.499148577451706,\"y\":1.29482686519623,\"z\":-11.5000848770142},\"rot\":{\"x\":6.59172383166151E-06,\"y\":0.000417048373492435,\"z\":2.20449396692857E-06},\"tint\":{\"a\":0.196078434586525,\"b\":1,\"g\":1,\"r\":1}},\"7911d4\":{\"lock\":false,\"pos\":{\"x\":-1.52412724494934,\"y\":6.09265661239624,\"z\":72.8944396972656},\"rot\":{\"x\":10.3710536956787,\"y\":180.016311645508,\"z\":0.00265552732162178},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"7ab1bc\":{\"lock\":false,\"pos\":{\"x\":-41.4999923706055,\"y\":2.04999685287476,\"z\":37.9999923706055},\"rot\":{\"x\":1.93329242392792E-07,\"y\":180.011932373047,\"z\":3.12086876874673E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"845644\":{\"lock\":false,\"pos\":{\"x\":41.5,\"y\":1.81496739387512,\"z\":38},\"rot\":{\"x\":-7.67168967286125E-06,\"y\":0.0135009959340096,\"z\":9.0504308900563E-06},\"tint\":{\"a\":0.294117659330368,\"b\":0.0941135510802269,\"g\":0.101957134902477,\"r\":0.858823537826538}},\"8b315f\":{\"lock\":false,\"pos\":{\"x\":-26.5,\"y\":1.5499,\"z\":-8},\"rot\":{\"x\":0,\"y\":359.9717,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"8e3b38\":{\"lock\":false,\"pos\":{\"x\":-54,\"y\":0.991760075092316,\"z\":-26.0000019073486},\"rot\":{\"x\":-0.00147449655923992,\"y\":90.0002212524414,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8f388b\":{\"lock\":false,\"pos\":{\"x\":-77.5000152587891,\"y\":0.991201877593994,\"z\":-26},\"rot\":{\"x\":-0.00147444999311119,\"y\":89.999870300293,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"91b2bb\":{\"lock\":false,\"pos\":{\"x\":6.50000047683716,\"y\":1.29482245445251,\"z\":-11.9999303817749},\"rot\":{\"x\":4.50565767096123E-06,\"y\":9.78637908701785E-05,\"z\":-1.10056362245814E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":0.910781145095825,\"r\":0}},\"91dcac\":{\"lock\":false,\"pos\":{\"x\":5.97587919235229,\"y\":1.6955646276474,\"z\":48.792293548584},\"rot\":{\"x\":10.3710508346558,\"y\":179.999420166016,\"z\":-0.000383313978090882},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"99e0d4\":{\"lock\":false,\"pos\":{\"x\":3.47588062286377,\"y\":1.06547296047211,\"z\":45.3494682312012},\"rot\":{\"x\":10.3710508346558,\"y\":179.989379882813,\"z\":-0.00219010096043348},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9a8a76\":{\"lock\":false,\"pos\":{\"x\":-1.52413022518158,\"y\":4.56225204467773,\"z\":64.532096862793},\"rot\":{\"x\":10.3710536956787,\"y\":179.994583129883,\"z\":-0.0012578247115016},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"a848b4\":{\"lock\":false,\"pos\":{\"x\":17.975549697876,\"y\":6.09441137313843,\"z\":72.9033889770508},\"rot\":{\"x\":10.3710536956787,\"y\":180.008010864258,\"z\":0.00116028357297182},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"a87e32\":{\"lock\":true,\"pos\":{\"x\":8.5,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0341,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ad48a2\":{\"lock\":false,\"pos\":{\"x\":-3.99729657173157,\"y\":1.29482555389404,\"z\":-12.0113363265991},\"rot\":{\"x\":8.1771535818064E-15,\"y\":180,\"z\":-1.90098020880214E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b058a1\":{\"lock\":false,\"pos\":{\"x\":-11,\"y\":1.47985970973969,\"z\":-11.9999990463257},\"rot\":{\"x\":2.64610466871318E-08,\"y\":180.014389038086,\"z\":-1.04646176168899E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b074f7\":{\"lock\":false,\"pos\":{\"x\":-45.5000114440918,\"y\":0.79496967792511,\"z\":-20.5000190734863},\"rot\":{\"x\":4.77405774290673E-06,\"y\":359.986053466797,\"z\":-5.82547727390192E-07},\"tint\":{\"a\":1,\"b\":0.375954866409302,\"g\":0.510450839996338,\"r\":0.00800354313105345}},\"b1b75f\":{\"lock\":true,\"pos\":{\"x\":-5,\"y\":0.9835,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0341,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b5e043\":{\"lock\":false,\"pos\":{\"x\":-71.0000305175781,\"y\":0.991369128227234,\"z\":-26.0000076293945},\"rot\":{\"x\":-0.00147449877113104,\"y\":89.9988250732422,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b6e1a5\":{\"lock\":false,\"pos\":{\"x\":20.97585105896,\"y\":1.69565379619598,\"z\":48.7922859191895},\"rot\":{\"x\":10.3710498809814,\"y\":180.01904296875,\"z\":0.00314752059057355},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bb09ad\":{\"lock\":false,\"pos\":{\"x\":-58.5000267028809,\"y\":0.991690814495087,\"z\":-26.0000095367432},\"rot\":{\"x\":-0.00147469027433544,\"y\":89.9993743896484,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bb11ca\":{\"lock\":false,\"pos\":{\"x\":-30,\"y\":1.5499,\"z\":-8},\"rot\":{\"x\":0,\"y\":359.9796,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"bc53e9\":{\"lock\":false,\"pos\":{\"x\":-6.9972972869873,\"y\":1.29482567310333,\"z\":-12.0113344192505},\"rot\":{\"x\":4.26886828108763E-07,\"y\":180,\"z\":-4.83582560661944E-08},\"tint\":{\"a\":1,\"b\":0.816393673419952,\"g\":0.0121951103210449,\"r\":1}},\"bdc58f\":{\"lock\":false,\"pos\":{\"x\":3.47588086128235,\"y\":1.69554960727692,\"z\":48.792293548584},\"rot\":{\"x\":10.3710508346558,\"y\":179.997695922852,\"z\":-0.000693205452989787},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"be745d\":{\"lock\":true,\"pos\":{\"x\":26.5,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.034,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bf4cff\":{\"lock\":false,\"pos\":{\"x\":10.975884437561,\"y\":1.69559252262115,\"z\":48.7922821044922},\"rot\":{\"x\":10.3710508346558,\"y\":179.988159179688,\"z\":-0.0024112097453326},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"bf6117\":{\"lock\":false,\"pos\":{\"x\":2,\"y\":1.54985964298248,\"z\":-11.9999990463257},\"rot\":{\"x\":-1.80137249117251E-07,\"y\":179.972381591797,\"z\":-1.3004942900352E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"c2be8a\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.56735956668854,\"z\":-12.0001001358032},\"rot\":{\"x\":1.0139774531126E-06,\"y\":179.999206542969,\"z\":5.05364312175516E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"c6ba69\":{\"lock\":false,\"pos\":{\"x\":-1.5241265296936,\"y\":1.41210222244263,\"z\":47.3192443847656},\"rot\":{\"x\":10.3710536956787,\"y\":180.00390625,\"z\":0.000420585420215502},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"c9d8a2\":{\"lock\":false,\"pos\":{\"x\":-22.5,\"y\":1.5499,\"z\":-8.5},\"rot\":{\"x\":0,\"y\":359.976,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"cbea8d\":{\"lock\":false,\"pos\":{\"x\":13.475887298584,\"y\":1.6956080198288,\"z\":48.7922821044922},\"rot\":{\"x\":10.3710498809814,\"y\":180.020553588867,\"z\":0.00342190312221646},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ce8024\":{\"lock\":false,\"pos\":{\"x\":9,\"y\":1.29482543468475,\"z\":-12},\"rot\":{\"x\":-4.26886742843635E-07,\"y\":180.004653930664,\"z\":-1.68485592144663E-09},\"tint\":{\"a\":1,\"b\":1,\"g\":0,\"r\":0.0483143776655197}},\"d08b04\":{\"lock\":false,\"pos\":{\"x\":15.9758815765381,\"y\":1.06554818153381,\"z\":45.3494682312012},\"rot\":{\"x\":10.3710508346558,\"y\":179.987167358398,\"z\":-0.00259022042155266},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d28d3b\":{\"lock\":true,\"pos\":{\"x\":-0.5,\"y\":0.9835,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0341,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d58b52\":{\"lock\":true,\"pos\":{\"x\":22,\"y\":0.9836,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.034,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"df22b6\":{\"lock\":false,\"pos\":{\"x\":-24.0001888275146,\"y\":1.46001160144806,\"z\":39.5021133422852},\"rot\":{\"x\":350.723419189453,\"y\":180.001098632813,\"z\":-0.000405443541239947},\"tint\":{\"a\":1,\"b\":0.576470553874969,\"g\":0.460747420787811,\"r\":0}},\"e07533\":{\"lock\":false,\"pos\":{\"x\":-53.8924217224121,\"y\":0.794960916042328,\"z\":27.6355667114258},\"rot\":{\"x\":359.947113037109,\"y\":329.093902587891,\"z\":0.0602767653763294},\"tint\":{\"a\":1,\"b\":0,\"g\":0.366520881652832,\"r\":0.70588231086731}},\"e0e2be\":{\"lock\":false,\"pos\":{\"x\":17.9758472442627,\"y\":4.56228351593018,\"z\":64.531623840332},\"rot\":{\"x\":10.3710536956787,\"y\":180.006454467773,\"z\":0.000879576429724693},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"e23149\":{\"lock\":false,\"pos\":{\"x\":-79.5000228881836,\"y\":0.991103827953339,\"z\":-25.9999656677246},\"rot\":{\"x\":-0.00147440191358328,\"y\":89.999153137207,\"z\":179.995193481445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ea313f\":{\"lock\":true,\"pos\":{\"x\":-9.5,\"y\":0.9835,\"z\":44.5},\"rot\":{\"x\":0,\"y\":180.0344,\"z\":179.9999},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ec8560\":{\"lock\":false,\"pos\":{\"x\":-19,\"y\":1.5499,\"z\":-8.5},\"rot\":{\"x\":0,\"y\":359.9739,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"ed6996\":{\"lock\":false,\"pos\":{\"x\":17.9758491516113,\"y\":3.03241372108459,\"z\":56.1721992492676},\"rot\":{\"x\":10.3710536956787,\"y\":180.001129150391,\"z\":-7.82658098614775E-05},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"f0caa1\":{\"lock\":false,\"pos\":{\"x\":-8.02412223815918,\"y\":4.5624303817749,\"z\":64.5332870483398},\"rot\":{\"x\":10.3710536956787,\"y\":179.997909545898,\"z\":-0.000658822245895863},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"f199f8\":{\"lock\":false,\"pos\":{\"x\":30.0000801086426,\"y\":1.49999260902405,\"z\":38.0000114440918},\"rot\":{\"x\":1.62878786795773E-05,\"y\":180.023468017578,\"z\":2.472067421877E-07},\"tint\":{\"a\":0.294117659330368,\"b\":0.090189091861248,\"g\":0.231364011764526,\"r\":0.443128734827042}},\"f2ab61\":{\"lock\":false,\"pos\":{\"x\":20.9758453369141,\"y\":1.06557881832123,\"z\":45.3494682312012},\"rot\":{\"x\":10.3710508346558,\"y\":179.991088867188,\"z\":-0.00188506278209388},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f77233\":{\"lock\":false,\"pos\":{\"x\":10.975884437561,\"y\":1.06551742553711,\"z\":45.3494606018066},\"rot\":{\"x\":10.3710508346558,\"y\":179.990097045898,\"z\":-0.00206187576986849},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f8c4b6\":{\"lock\":false,\"pos\":{\"x\":11.4758796691895,\"y\":4.56255006790161,\"z\":64.5332946777344},\"rot\":{\"x\":10.3710536956787,\"y\":180.014022827148,\"z\":0.00224229879677296},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fc23ce\":{\"lock\":false,\"pos\":{\"x\":18.4758491516113,\"y\":1.69563794136047,\"z\":48.7922821044922},\"rot\":{\"x\":10.3710508346558,\"y\":179.987152099609,\"z\":-0.0025932511780411},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
  "XmlUI": ""
}
